/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var renderer;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "./node_modules/no-drift/src/nodriftzero.js":
/*!**************************************************!*\
  !*** ./node_modules/no-drift/src/nodriftzero.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"setNoDriftZeroTimeout\": () => (/* binding */ setNoDriftZeroTimeout),\n/* harmony export */   \"setNoDriftZeroInterval\": () => (/* binding */ setNoDriftZeroInterval),\n/* harmony export */   \"clearNoDriftZero\": () => (/* binding */ clearNoDriftZero)\n/* harmony export */ });\n// collection of IDs so that the timers can be cleared\r\nconst IDs = new Map();\r\nconst intervalThresholdIDs = new Map();\r\n// variable to keep track of and return a new ID\r\nlet newID = 1;\r\n\r\nconst rate = 0.9;\r\nconst threshold = 16; // ms\r\n\r\n/**\r\n * this calls a function to get a timestamp\r\n * \r\n * @returns a timestamp\r\n */\r\nconst getTimestamp = () => performance.now();\r\n/*\r\n    other timestamp functions\r\n\r\n    -------------------------\r\n\r\n    {\r\n        const time = process.hrtime();\r\n        return time[0] * 1000 + time[1] / 1000000; // ms\r\n    }\r\n\r\n    -------------------------\r\n\r\n    Number(process.hrtime.bigint() / 1000000n); // ms\r\n\r\n    -------------------------\r\n\r\n    Date.now();\r\n*/\r\n\r\n/**\r\n * creates a function if the callback is a string\r\n * \r\n * @param {Function} callback \r\n * @param {...any} args \r\n * @returns \r\n */\r\nfunction createCallback(callback, args) {\r\n    if (typeof callback === 'function') {\r\n        return () => callback(...args);\r\n    }\r\n\r\n    return Function(...args, callback);\r\n}\r\n\r\n//-------------------------------------------------------------------------\r\n// timeout\r\n\r\n/**\r\n * recursively calls this function to check the time\r\n * \r\n * @param {Function} callback \r\n * @param {Number} end \r\n * @param {Number} ID \r\n */\r\nfunction zeroTimeout(callback, end, ID) {\r\n    // recursion\r\n    if (0 < end - getTimestamp()) {\r\n        IDs.set(\r\n            ID,\r\n            setTimeout(() => {\r\n                zeroTimeout(callback, end, ID);\r\n            })\r\n        );\r\n\r\n        //--------------------\r\n\r\n        // IDs.set(\r\n        //     ID,\r\n        //     setImmediate(() => {\r\n        //         zeroTimeout(callback, end, ID);\r\n        //     })\r\n        // );\r\n    }\r\n    else {\r\n        // IDs.set(\r\n        //     ID,\r\n        //     setTimeout(() => {\r\n        //         callback();\r\n        //     })\r\n        // );\r\n\r\n        //--------------------\r\n\r\n        // IDs.set(\r\n        //     ID,\r\n        //     setImmediate(() => {\r\n        //         callback();\r\n        //     })\r\n        // );\r\n\r\n        //--------------------\r\n\r\n        callback();\r\n\r\n        IDs.delete(ID);\r\n    }\r\n\r\n    //--------------------\r\n\r\n    // spinning\r\n    // while (0 < end - getTimestamp()) {}\r\n\r\n    // callback();\r\n}\r\n\r\n/**\r\n * recursively calls this function to check the time\r\n * \r\n * @param {Function} callback \r\n * @param {Number} end \r\n * @param {Number} ID \r\n */\r\nfunction zeroInterval(callback, end, ID) {\r\n    // recursion\r\n    if (0 < end - getTimestamp()) {\r\n        intervalThresholdIDs.set(\r\n            ID,\r\n            setTimeout(() => {\r\n                zeroInterval(callback, end, ID);\r\n            })\r\n        );\r\n\r\n        //--------------------\r\n\r\n        // intervalThresholdIDs.set(\r\n        //     ID,\r\n        //     setImmediate(() => {\r\n        //         zeroInterval(callback, end, ID);\r\n        //     })\r\n        // );\r\n    }\r\n    else {\r\n        // setTimeout(() => {\r\n        //     callback();\r\n        // });\r\n\r\n        //--------------------\r\n\r\n        // setImmediate(() => {\r\n        //     callback();\r\n        // });\r\n\r\n        //--------------------\r\n\r\n        callback();\r\n\r\n        intervalThresholdIDs.delete(ID);\r\n    }\r\n\r\n    //--------------------\r\n\r\n    // spinning\r\n    // while (0 < end - getTimestamp()) {}\r\n\r\n    // callback();\r\n}\r\n\r\n/**\r\n * calls timeout until the time has been reached\r\n * \r\n * @param {Function} callback \r\n * @param {Number} end \r\n * @param {Number} ID \r\n */\r\nfunction customTimeout(callback, end, ID) {\r\n    const delta = end - getTimestamp();\r\n\r\n    if (delta > threshold) {\r\n        IDs.set(\r\n            ID,\r\n            setTimeout(() => {\r\n                customTimeout(callback, end, ID);\r\n            }, rate * delta)\r\n        );\r\n    }\r\n    else {\r\n        zeroTimeout(callback, end, ID);\r\n    }\r\n}\r\n\r\n/**\r\n * calls timeout until the time has been reached\r\n * \r\n * @param {Function} callback \r\n * @param {Number} ms \r\n * @param  {...any} args \r\n * @returns an ID\r\n */\r\nfunction setNoDriftZeroTimeout(callback, ms = 0, ...args) {\r\n    customTimeout(createCallback(callback, args), ms + getTimestamp(), newID);\r\n\r\n    return newID++;\r\n}\r\n\r\n//-------------------------------------------------------------------------\r\n// interval\r\n\r\n/**\r\n * calls timeout repeatedly\r\n * \r\n * @param {Function} callback \r\n * @param {Number} time \r\n * @param {Number} end \r\n * @param {Number} ID \r\n */\r\nfunction customInterval(callback, time, end, ID) {\r\n    let delta = end - getTimestamp();\r\n\r\n    if (delta <= threshold) {\r\n        zeroInterval(callback, end, ID);\r\n        end += time;\r\n        delta += time;\r\n    }\r\n\r\n    IDs.set(\r\n        ID,\r\n        setTimeout(() => {\r\n            customInterval(callback, time, end, ID);\r\n        }, rate * delta)\r\n    );\r\n}\r\n\r\n/**\r\n * calls timeout repeatedly\r\n * \r\n * @param {Function} callback \r\n * @param {Number} ms \r\n * @param  {...any} args \r\n * @returns an ID\r\n */\r\nfunction setNoDriftZeroInterval(callback, ms = 0, ...args) {\r\n    customInterval(createCallback(callback, args), ms, ms + getTimestamp(), newID);\r\n\r\n    return newID++;\r\n}\r\n\r\n//-------------------------------------------------------------------------\r\n// clear function\r\n\r\n/**\r\n * cancels a no drift timeout or interval\r\n * \r\n * @param {Number} ID \r\n */\r\nfunction clearNoDriftZero(ID) {\r\n    clearTimeout(IDs.get(ID));\r\n    clearTimeout(intervalThresholdIDs.get(ID));\r\n    IDs.delete(ID);\r\n    intervalThresholdIDs.delete(ID);\r\n}\r\n\n\n//# sourceURL=webpack://renderer/./node_modules/no-drift/src/nodriftzero.js?");

/***/ }),

/***/ "./node_modules/no-drift/src/worker/worker.js":
/*!****************************************************!*\
  !*** ./node_modules/no-drift/src/worker/worker.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _nodriftzero_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../nodriftzero.js */ \"./node_modules/no-drift/src/nodriftzero.js\");\n/* harmony import */ var worker_threads__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! worker_threads */ \"worker_threads\");\n// default nodrift functions are nodriftzero\r\n\r\n\r\n\r\n\r\n// collection of IDs so that the timers can be cleared\r\nconst IDs = new Map();\r\n\r\n// execute certain function\r\nworker_threads__WEBPACK_IMPORTED_MODULE_1__.parentPort.on('message', vars => {\r\n    const {\r\n        type,\r\n        time,\r\n        ID\r\n    } = vars;\r\n\r\n    switch (type) {\r\n        case 'interval':\r\n            IDs.set(ID, (0,_nodriftzero_js__WEBPACK_IMPORTED_MODULE_0__.setNoDriftZeroInterval)(() => worker_threads__WEBPACK_IMPORTED_MODULE_1__.parentPort.postMessage({\r\n                type,\r\n                ID\r\n            }), time));\r\n\r\n            break;\r\n        case 'timeout':\r\n            IDs.set(ID, (0,_nodriftzero_js__WEBPACK_IMPORTED_MODULE_0__.setNoDriftZeroTimeout)(() => worker_threads__WEBPACK_IMPORTED_MODULE_1__.parentPort.postMessage({\r\n                type,\r\n                ID\r\n            }), time));\r\n\r\n            break;\r\n        default:\r\n            (0,_nodriftzero_js__WEBPACK_IMPORTED_MODULE_0__.clearNoDriftZero)(IDs.get(ID));\r\n            IDs.delete(ID);\r\n\r\n            break;\r\n    }\r\n});\r\n\n\n//# sourceURL=webpack://renderer/./node_modules/no-drift/src/worker/worker.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./node_modules/no-drift/src/worker/worker.js");
/******/ 	renderer = __webpack_exports__;
/******/ 	
/******/ })()
;